{"version":3,"sources":["image/check.svg","image/check-complete.svg","image/check-all.svg","components/Todoitem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","this","props","item","onClick","url","checkImg","isComplete","checkCompleteImg","className","classNames","alt","src","width","height","title","Component","App","state","newItem","currentFilter","todoItems","onKeyUp","bind","onChange","All","Active","Completed","Delete","event","index","indexOf","setState","slice","keyCode","text","target","value","trim","todoItemsFilter","filter","x","checkAll","type","placeholder","length","map","key","onItemClicked","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c2ae158.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.b191d3b7.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-complete.c884f427.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-all.bdae0272.svg\";","import React, {Component} from 'react';\nimport './Todoitem.css';\nimport classNames from 'classnames';\nimport checkImg from '../image/check.svg'\nimport checkCompleteImg from '../image/check-complete.svg'\nclass TodoItem extends Component{\n  render(){\n    const { item, onClick } = this.props;\n    let url = checkImg;\n    if(item.isComplete)\n      url = checkCompleteImg;\n    return (  \n      <div className={classNames('TodoItem', {\n        'TodoItem-complete': item.isComplete\n      })}>\n        <img alt=\"\" src={url} width={24} height={24} onClick={onClick}/>\n        <p>{this.props.item.title}</p>\n      </div>\n    )\n  }\n}\nexport default TodoItem","import React from 'react';\nimport './App.css';\nimport TodoItem from './components/Todoitem'\nimport checkAll from './image/check-all.svg'\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      newItem: \"\",\n      currentFilter: \"All\",\n      todoItems: [\n        { title: 'Mua bim bim', isComplete: true }, \n        { title: 'đi chợ', isComplete: true }, \n        { title: 'đi đá bóng', isComplete: false }\n      ]\n    }\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.All = this.All.bind(this);\n    this.Active = this.Active.bind(this);\n    this.Completed = this.Completed.bind(this);\n    this.Delete = this.Delete.bind(this);\n  }\n  \n  onItemClicked(item) {\n    return (event) => {\n      const isComplete = item.isComplete;\n      const { todoItems } = this.state;\n      const index = todoItems.indexOf(item);\n      this.setState({\n        todoItems: [\n          ...todoItems.slice(0, index),\n          {\n            ...item,  \n            isComplete: !isComplete\n          },\n          ...todoItems.slice(index + 1)\n        ]\n      }) \n    }\n   \n  }\n  onKeyUp(event) {\n    if (event.keyCode === 13) {\n      let text =  event.target.value;\n      if(!text) {\n       return;\n      }\n      text = text.trim();\n      if(!text) {\n        return;\n       }\n      this.setState({\n        newItem: \"\",\n        todoItems: [\n          { title: text, isComplete: false},\n          ...this.state.todoItems\n        ]\n      })\n    }\n  }\n  onChange(event) {\n    this.setState({\n      newItem: event.target.value\n    })\n  }\n  All(){\n    this.setState({\n      currentFilter: \"All\"\n    })\n  }\n  Active(){\n    this.setState({\n      currentFilter: \"Active\"\n    })\n  }\n  Completed(){\n    this.setState({\n      currentFilter: \"Completed\"\n    })\n  }\n\n  Delete(){\n    const { todoItems } = this.state;\n    var todoItemsFilter = todoItems.filter(x => x.isComplete === false);\n    this.setState({\n      currentFilter: \"Delete\",\n      todoItems: todoItemsFilter\n    })\n  }\n  render() {\n    const { todoItems, newItem, currentFilter } = this.state;\n    let todoItemsFilter;\n    if(currentFilter === \"All\") todoItemsFilter = todoItems;\n    if(currentFilter === \"Active\")  todoItemsFilter = todoItems.filter(x => x.isComplete === false);\n    if(currentFilter === \"Completed\") todoItemsFilter = todoItems.filter(x => x.isComplete === true);\n    if(currentFilter === \"Delete\") todoItemsFilter = todoItems\n    return (\n      <div className=\"container\">\n        <h1>todos</h1>\n        <div className=\"todos\">\n          <header className=\"header\">\n            <div className=\"input\">\n              <img alt=\"\" src={checkAll} width={17} height={17}/>\n              <input \n                type=\"text\" \n                placeholder=\"Add a new item\"\n                value = {newItem}\n                onChange = {this.onChange} \n                onKeyUp={this.onKeyUp}/>\n              </div>\n            \n          </header>\n          {\n            todoItemsFilter.length > 0 && todoItemsFilter.map((item, index) => \n              <TodoItem \n                key={index} \n                item={item} \n                onClick={this.onItemClicked(item)}/>\n              )\n          }\n          {/* {\n            todoItemsFilter.length === 0 && 'Nothing here'\n          } */}\n          <div className=\"foo\">\n            <ul className=\"filter\">\n              <li><p onClick={this.All}>All</p></li>\n              <li><p onClick={this.Active}>Active</p></li>\n              <li><p onClick={this.Completed}>Completed</p></li>\n            </ul>\n            <p className=\"delete\" onClick={this.Delete}>Clear completed</p>\n          </div>\n        </div>\n      </div>\n    );\n      }\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}