{"version":3,"sources":["image/check.svg","image/check-complete.svg","image/remove.svg","image/check-all.svg","components/Todoitem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","this","props","item","checkButton","deleteButton","url","checkImg","isComplete","checkCompleteImg","className","classNames","alt","src","width","height","onClick","title","remove","Component","App","data","localStorage","getItem","state","JSON","parse","onKeyUp","bind","onChange","All","Active","Completed","ClearCompleted","Delete","SelectAll","event","todoItems","index","indexOf","setState","slice","keyCode","text","target","value","trim","newItem","currentFilter","todoItemsFilter","filter","x","setItem","stringify","checkAll","type","placeholder","length","map","key","onItemClicked","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,sTCuB5BC,E,iLAhBJ,IAAD,EACsCC,KAAKC,MAAzCC,EADF,EACEA,KAAMC,EADR,EACQA,YAAaC,EADrB,EACqBA,aACvBC,EAAMC,IAGV,OAFGJ,EAAKK,aACNF,EAAMG,KAEJ,yBAAKC,UAAWC,IAAW,WAAY,CACrC,oBAAqBR,EAAKK,cAE1B,yBAAKI,IAAI,GAAGC,IAAKP,EAAKQ,MAAO,GAAIC,OAAQ,GAAIC,QAASZ,IACtD,2BAAIH,KAAKC,MAAMC,KAAKc,OACpB,yBAAKL,IAAI,GAAGC,IAAKK,IAAQJ,MAAO,GAAIC,OAAQ,GAAIL,UAAU,SAASM,QAASX,S,GAZ/Dc,a,8kBCwKRC,E,YAxKb,aAAc,IAAD,sBACX,8CACA,IACIC,EAAOC,aAAaC,QADP,QAFN,OAKT,EAAKC,MADJH,EACYI,KAAKC,MAAML,GAGX,CACX,QAAU,GACV,cAAgB,MAChB,UAAY,IAGhB,EAAKM,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,IAAM,EAAKA,IAAIF,KAAT,gBACX,EAAKG,OAAS,EAAKA,OAAOH,KAAZ,gBACd,EAAKI,UAAY,EAAKA,UAAUJ,KAAf,gBACjB,EAAKK,eAAiB,EAAKA,eAAeL,KAApB,gBACtB,EAAKM,OAAS,EAAKA,OAAON,KAAZ,gBACd,EAAKO,UAAY,EAAKA,UAAUP,KAAf,gBArBN,E,2EAwBCzB,GAAO,IAAD,OAClB,OAAO,SAACiC,GACN,IAAM5B,EAAaL,EAAKK,WAChB6B,EAAc,EAAKb,MAAnBa,UACFC,EAAQD,EAAUE,QAAQpC,GAChC,EAAKqC,SAAS,CACZH,UAAU,GAAD,mBACJA,EAAUI,MAAM,EAAGH,IADf,MAGFnC,EAHE,CAILK,YAAaA,KAJR,YAMJ6B,EAAUI,MAAMH,EAAQ,U,8BAM3BF,GAEN,GAAsB,KAAlBA,EAAMM,QAAgB,CACxB,IAAIC,EAAQP,EAAMQ,OAAOC,MACzB,IAAIF,EACH,OAGD,KADAA,EAAOA,EAAKG,QAEV,OAEF7C,KAAKuC,SAAS,CACZO,QAAS,GACTV,UAAU,CACR,CAAEpB,MAAO0B,EAAMnC,YAAY,IADpB,mBAEJP,KAAKuB,MAAMa,iB,+BAMbD,GAEPnC,KAAKuC,SAAS,CACZO,QAASX,EAAMQ,OAAOC,U,4BAIxB5C,KAAKuC,SAAS,CACZQ,cAAe,U,+BAIjB/C,KAAKuC,SAAS,CACZQ,cAAe,a,kCAIjB/C,KAAKuC,SAAS,CACZQ,cAAe,gB,uCAGF,IAEXC,EADkBhD,KAAKuB,MAAnBa,UACwBa,QAAO,SAAAC,GAAC,OAAqB,IAAjBA,EAAE3C,cAC9CP,KAAKuC,SAAS,CACZQ,cAAe,iBACfX,UAAWY,M,6BAGR9C,GAAO,IAAD,OACX,OAAO,SAACiC,GACajC,EAAKK,WAAxB,IACQ6B,EAAc,EAAKb,MAAnBa,UACFC,EAAQD,EAAUE,QAAQpC,GAChC,EAAKqC,SAAS,CACZH,UAAU,GAAD,mBACJA,EAAUI,MAAM,EAAGH,IADf,YAEJD,EAAUI,MAAMH,EAAQ,U,kCAKtB,IACDD,EAAcpC,KAAKuB,MAAnBa,UACR,IAAI,IAAIc,KAAKd,EACXA,EAAUc,GAAG3C,YAAa,EAE5B,IAAIyC,EAAkBZ,EACtBpC,KAAKuC,SAAS,CACZQ,cAAe,YACfX,UAAWY,M,+BAGP,IAEJA,EAFG,SACuChD,KAAKuB,MAA3Ca,EADD,EACCA,UAAWU,EADZ,EACYA,QAASC,EADrB,EACqBA,cAEP,QAAlBA,IAAyBC,EAAkBZ,GACzB,WAAlBW,IAA6BC,EAAkBZ,EAAUa,QAAO,SAAAC,GAAC,OAAqB,IAAjBA,EAAE3C,eACrD,cAAlBwC,IAA+BC,EAAkBZ,EAAUa,QAAO,SAAAC,GAAC,OAAqB,IAAjBA,EAAE3C,eACvD,mBAAlBwC,IAAoCC,EAAkBZ,GACpC,cAAlBW,IAA+BC,EAAkBZ,GAGpD,OADAf,aAAa8B,QADI,OACgB3B,KAAK4B,UAAUpD,KAAKuB,QAEnD,yBAAKd,UAAU,aACb,qCACA,yBAAKA,UAAU,SACb,4BAAQA,UAAU,UAChB,yBAAKA,UAAU,SACb,yBAAKE,IAAI,GAAGC,IAAKyC,IAAUxC,MAAO,GAAIC,OAAQ,GAAIC,QAASf,KAAKkC,YAChE,2BACEoB,KAAK,OACLC,YAAY,yBACZX,MAASE,EACTlB,SAAY5B,KAAK4B,SACjBF,QAAS1B,KAAK0B,YAIlBsB,EAAgBQ,OAAS,GAAKR,EAAgBS,KAAI,SAACvD,EAAMmC,GAAP,OAChD,kBAAC,EAAD,CACEqB,IAAKrB,EACLnC,KAAMA,EACNC,YAAa,EAAKwD,cAAczD,GAChCE,aAAc,EAAK6B,OAAO/B,QAKhC8C,EAAgBQ,OAAS,GACzB,yBAAK/C,UAAU,OACb,wBAAIA,UAAU,UACZ,4BAAI,uBAAGM,QAASf,KAAK6B,KAAjB,QACJ,4BAAI,uBAAGd,QAASf,KAAK8B,QAAjB,WACJ,4BAAI,uBAAGf,QAASf,KAAK+B,WAAjB,eAEN,uBAAGtB,UAAU,iBAAiBM,QAASf,KAAKgC,gBAA5C,0B,GAjKM4B,IAAM1C,WCQJ2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bf699046.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.b191d3b7.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-complete.c884f427.svg\";","module.exports = __webpack_public_path__ + \"static/media/remove.270d72e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-all.bdae0272.svg\";","import React, {Component} from 'react';\nimport './Todoitem.css';\nimport classNames from 'classnames';\nimport checkImg from '../image/check.svg'\nimport checkCompleteImg from '../image/check-complete.svg'\nimport remove from '../image/remove.svg'\nclass TodoItem extends Component{\n  render(){\n    const { item, checkButton, deleteButton } = this.props;\n    let url = checkImg;\n    if(item.isComplete)\n      url = checkCompleteImg;\n    return (  \n        <div className={classNames('TodoItem', {\n          'TodoItem-complete': item.isComplete\n        })}>\n          <img alt=\"\" src={url} width={24} height={24} onClick={checkButton}/>\n          <p>{this.props.item.title}</p>\n          <img alt=\"\" src={remove} width={15} height={15} className=\"delete\" onClick={deleteButton}></img>\n        </div>\n    )\n  }\n}\nexport default TodoItem","import React from 'react';\nimport './App.css';\nimport TodoItem from './components/Todoitem'\nimport checkAll from './image/check-all.svg'\nclass App extends React.Component {\n  \n  constructor(){\n    super();\n    var storageKey = \"data\";\n    var data = localStorage.getItem(storageKey)\n    if(data){\n      this.state = JSON.parse(data);\n    }\n    else {\n      this.state = {\n        \"newItem\":\"\",\n        \"currentFilter\":\"All\",\n        \"todoItems\":[]\n      }\n    }\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.All = this.All.bind(this);\n    this.Active = this.Active.bind(this);\n    this.Completed = this.Completed.bind(this);\n    this.ClearCompleted = this.ClearCompleted.bind(this);\n    this.Delete = this.Delete.bind(this);\n    this.SelectAll = this.SelectAll.bind(this);\n  }\n  \n  onItemClicked(item) {\n    return (event) => {\n      const isComplete = item.isComplete;\n      const { todoItems } = this.state;\n      const index = todoItems.indexOf(item);\n      this.setState({\n        todoItems: [\n          ...todoItems.slice(0, index),\n          {\n            ...item,  \n            isComplete: !isComplete\n          },\n          ...todoItems.slice(index + 1)\n        ]\n      }) \n    }\n   \n  }\n  onKeyUp(event) {\n\n    if (event.keyCode === 13) {\n      let text =  event.target.value;\n      if(!text) {\n       return;\n      }\n      text = text.trim();\n      if(!text) {\n        return;\n       }\n      this.setState({\n        newItem: \"\",\n        todoItems: [\n          { title: text, isComplete: false},\n          ...this.state.todoItems\n        ]\n      })\n    }\n    \n  }\n  onChange(event) {\n\n    this.setState({\n      newItem: event.target.value\n    })\n  }\n  All(){\n    this.setState({\n      currentFilter: \"All\"\n    })\n  }\n  Active(){\n    this.setState({\n      currentFilter: \"Active\"\n    })\n  }\n  Completed(){\n    this.setState({\n      currentFilter: \"Completed\"\n    })\n  }\n  ClearCompleted(){\n    const { todoItems } = this.state;\n    var todoItemsFilter = todoItems.filter(x => x.isComplete === false);\n    this.setState({\n      currentFilter: \"ClearCompleted\",\n      todoItems: todoItemsFilter\n    })\n  }\n  Delete(item) {\n    return (event) => {\n      const isComplete = item.isComplete;\n      const { todoItems } = this.state;\n      const index = todoItems.indexOf(item);\n      this.setState({\n        todoItems: [\n          ...todoItems.slice(0, index),\n          ...todoItems.slice(index + 1)\n        ]\n      }) \n    }\n  }\n  SelectAll() {\n      const { todoItems } = this.state;\n      for(var x in todoItems){\n        todoItems[x].isComplete = true;\n      }\n      var todoItemsFilter = todoItems\n      this.setState({\n        currentFilter: \"SelectAll\",\n        todoItems: todoItemsFilter\n      })\n  }\n  render() {\n    const { todoItems, newItem, currentFilter } = this.state;\n    let todoItemsFilter;\n    if(currentFilter === \"All\") todoItemsFilter = todoItems;\n    if(currentFilter === \"Active\")  todoItemsFilter = todoItems.filter(x => x.isComplete === false);\n    if(currentFilter === \"Completed\") todoItemsFilter = todoItems.filter(x => x.isComplete === true);\n    if(currentFilter === \"ClearCompleted\") todoItemsFilter = todoItems\n    if(currentFilter === \"SelectAll\") todoItemsFilter = todoItems\n    var storageKey = \"data\"\n    localStorage.setItem(storageKey, JSON.stringify(this.state))\n    return (\n      <div className=\"container\">\n        <h1>todos</h1>\n        <div className=\"todos\">\n          <header className=\"header\">\n            <div className=\"input\">\n              <img alt=\"\" src={checkAll} width={17} height={17} onClick={this.SelectAll}/>\n              <input \n                type=\"text\" \n                placeholder=\"What needs to be done?\"\n                value = {newItem}\n                onChange = {this.onChange} \n                onKeyUp={this.onKeyUp}/>\n              </div>\n          </header>\n          {\n            todoItemsFilter.length > 0 && todoItemsFilter.map((item, index) => \n              <TodoItem \n                key={index} \n                item={item} \n                checkButton={this.onItemClicked(item)}\n                deleteButton={this.Delete(item)}\n              />\n              )\n          }\n          {\n          todoItemsFilter.length > 0 &&\n          <div className=\"foo\">\n            <ul className=\"filter\">\n              <li><p onClick={this.All}>All</p></li>\n              <li><p onClick={this.Active}>Active</p></li>\n              <li><p onClick={this.Completed}>Completed</p></li>\n            </ul>\n            <p className=\"ClearCompleted\" onClick={this.ClearCompleted}>Clear completed</p>\n          </div>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}